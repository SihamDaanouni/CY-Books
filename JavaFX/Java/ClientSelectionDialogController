package com.example.cybook;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.File;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

public class ClientSelectionDialogController {

    @FXML
    private ListView<String> clientListView;
    @FXML
    private DatePicker dateRetourPicker;
    @FXML
    private Spinner<Integer> hourSpinner;
    @FXML
    private Spinner<Integer> minuteSpinner;
    @FXML
    private TextField searchClientField;

    private Stage dialogStage;
    private Book book;
    private boolean confirmed = false;

    private ObservableList<String> clientList = FXCollections.observableArrayList();
    private FilteredList<String> filteredClients;

    @FXML
    public void initialize() {
        loadClients();
        SpinnerValueFactory<Integer> hourValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 23, 12);
        SpinnerValueFactory<Integer> minuteValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 59, 0);
        hourSpinner.setValueFactory(hourValueFactory);
        minuteSpinner.setValueFactory(minuteValueFactory);

        filteredClients = new FilteredList<>(clientList, p -> true);
        clientListView.setItems(filteredClients);

        searchClientField.textProperty().addListener((observable, oldValue, newValue) -> {
            filteredClients.setPredicate(client -> {
                if (newValue == null || newValue.isEmpty()) {
                    return true;
                }
                String lowerCaseFilter = newValue.toLowerCase();
                return client.toLowerCase().contains(lowerCaseFilter);
            });
            // Show filtered items in the list view
            clientListView.setVisible(true);
        });
    }

    public void setDialogStage(Stage dialogStage) {
        this.dialogStage = dialogStage;
    }

    public void setBook(Book book) {
        this.book = book;
    }

    public boolean isConfirmed() {
        return confirmed;
    }

    private void loadClients() {
        try {
            URL resource = getClass().getClassLoader().getResource("database");
            if (resource == null) {
                throw new IllegalArgumentException("Base de données non trouvée!");
            }

            File dbFile = new File(resource.toURI());
            String url = "jdbc:sqlite:" + dbFile.getAbsolutePath();

            Connection connection = DriverManager.getConnection(url);
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM Client");

            while (resultSet.next()) {
                String client = resultSet.getString("name") + " " + resultSet.getString("firstName") + " " + resultSet.getString("mail");
                clientList.add(client);
            }

            resultSet.close();
            statement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void handleConfirm() {
        if (clientListView.getSelectionModel().isEmpty() || dateRetourPicker.getValue() == null || hourSpinner.getValue() == null || minuteSpinner.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Validation Warning");
            alert.setHeaderText(null);
            alert.setContentText("Veuillez remplir tous les champs requis.");
            alert.showAndWait();
        } else {
            confirmed = true;
            dialogStage.close();
        }
    }

    @FXML
    private void handleCancel() {
        dialogStage.close();
    }

    public String getSelectedClient() {
        return clientListView.getSelectionModel().getSelectedItem();
    }

    public LocalDateTime getReturnDate() {
        return LocalDateTime.of(dateRetourPicker.getValue(), LocalTime.of(hourSpinner.getValue(), minuteSpinner.getValue()));
    }
}
